AWSTemplateFormatVersion: '2010-09-09'
Description: EKS VPC (2 AZ), EKS Cluster, and Managed Node Group

Parameters:
  StackNamePrefix: { Type: String, Default: sr }
  VpcCidr:         { Type: String, Default: 10.0.0.0/16 }
  ClusterName:     { Type: String, Default: sr-eks }
  KubernetesVersion: { Type: String, Default: '1.29' }
  NodeInstanceType:  { Type: String, Default: m6i.large }
  NodeDesiredCapacity: { Type: Number, Default: 2 }
  NodeMinSize:        { Type: Number, Default: 2 }
  NodeMaxSize:        { Type: Number, Default: 4 }

Mappings:
  RegionMap:
    us-east-1: { AZ1: a, AZ2: b }
    us-east-2: { AZ1: a, AZ2: b }
    us-west-2: { AZ1: a, AZ2: b }

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-vpc" }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: { Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-igw" }] }

  VpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: { VpcId: !Ref Vpc, InternetGatewayId: !Ref InternetGateway }

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: !Sub
        - "${AWS::Region}${Az1}"
        - { Az1: { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AZ1" ] } }
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: !Sub "${StackNamePrefix}-public-a" }
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Key: kubernetes.io/role/elb, Value: '1' }

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: !Sub
        - "${AWS::Region}${Az2}"
        - { Az2: { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AZ2" ] } }
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: !Sub "${StackNamePrefix}-public-b" }
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Key: kubernetes.io/role/elb, Value: '1' }

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.32.0/19
      AvailabilityZone: !Sub
        - "${AWS::Region}${Az1}"
        - { Az1: { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AZ1" ] } }
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: !Sub "${StackNamePrefix}-private-a" }
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Key: kubernetes.io/role/internal-elb, Value: '1' }

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.64.0/19
      AvailabilityZone: !Sub
        - "${AWS::Region}${Az2}"
        - { Az2: { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AZ2" ] } }
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: !Sub "${StackNamePrefix}-private-b" }
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Key: kubernetes.io/role/internal-elb, Value: '1' }

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref Vpc, Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-public-rt" }] }

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PublicSubnet1, RouteTableId: !Ref PublicRouteTable }

  PublicSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PublicSubnet2, RouteTableId: !Ref PublicRouteTable }

  NatEip:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-nat" }]

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref Vpc, Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-private-rt-a" }] }

  PrivateRoute1Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PrivateSubnet1, RouteTableId: !Ref PrivateRouteTable1 }

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref Vpc, Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-private-rt-b" }] }

  PrivateRoute2Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PrivateSubnet2, RouteTableId: !Ref PrivateRouteTable2 }

  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: eks.amazonaws.com }, Action: sts:AssumeRole }]
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/AmazonEKSClusterPolicy ]
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-eks-cluster-role" }]

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EksClusterRole.Arn
      ResourcesVpcConfig:
        EndpointPrivateAccess: false
        EndpointPublicAccess: true
        SecurityGroupIds: []
        SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: ec2.amazonaws.com }, Action: sts:AssumeRole }]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags: [{ Key: Name, Value: !Sub "${StackNamePrefix}-eks-node-role" }]

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref EksCluster
      NodeRole: !GetAtt NodeRole.Arn
      Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      ScalingConfig: { DesiredSize: !Ref NodeDesiredCapacity, MinSize: !Ref NodeMinSize, MaxSize: !Ref NodeMaxSize }
      InstanceTypes: [ !Ref NodeInstanceType ]
      AmiType: AL2_x86_64
      DiskSize: 50
      NodegroupName: !Sub "${StackNamePrefix}-nodes"
      CapacityType: ON_DEMAND

Outputs:
  ClusterName:       { Value: !Ref ClusterName }
  ClusterArn:        { Value: !GetAtt EksCluster.Arn }
  VpcId:             { Value: !Ref Vpc }
  PrivateSubnetIds:  { Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]] }
  PublicSubnetIds:   { Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]] }


